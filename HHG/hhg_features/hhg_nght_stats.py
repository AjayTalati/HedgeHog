

########################################################################
#
# Filename: hhg_nght_stats.py							Author: Kristof VL
#
# Descript: Night feature extraction routines for HedgeHog datasets
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#       
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#       
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
# 



from numpy import *
import time
from matplotlib.dates import num2date
from hhg_bstats import *




def hhg_nght_stats(dta):
	tme_ngt, dta_mv, env, stats = hhg_bstats_ts(dta,60) # stats /minute
	tic = time.clock()
	min_ngt = 1440.0*(tme_ngt%1)
	min_ngt = divide( hhg_to_nighttime_prob(min_ngt.astype(integer)),10.)
	acc_ngt = sum(dta_mv[:,3:6], axis=1)
	acc_ngt = divide( acc_ngt, max(acc_ngt)*0.01)
	lgt_ngt = divide( env, max(env)*0.01)
	res_ngt = sum( ( acc_ngt<2, acc_ngt<4, acc_ngt<6, (acc_ngt>20)*-3,
						  lgt_ngt<2, lgt_ngt<4, lgt_ngt<6, (lgt_ngt>30)*-3,
						  min_ngt>50), axis=0 ) > 4
	res_b = zeros(len(res_ngt))
	# if enough data is gathered, do sleep estimation:
	if len(res_b)>30:
		# low level windows to smoothen gaps and outliers away:
		for diam in range(2,5):
			for i in range(0,len(res_b)-(diam*2+1)):
				if sum(res_ngt[i:i+(diam*2+1)])>diam: res_b[i+diam]=100
				else: res_b[i+diam]=0;
		# high level pass to get rid of everything less than half-hour segs:
		# TODO
	toc = time.clock()
	stats += ', nght_stats time: '+ str(toc-tic)
	return tme_ngt, acc_ngt, lgt_ngt, min_ngt, res_b, stats


# convert minute-of-day to a nighttime probability (as 0-1000 value)
def hhg_to_nighttime_prob(dta):
	p_ngt = [ 951, 951, 952, 952, 953, 953, 954, 954, 955, 955, 956, 956, 957, 957, 958, 958, 959, 959, 960, 960, 
			961, 961, 962, 962, 963, 963, 964, 964, 964, 965, 965, 966, 966, 966, 967, 967, 968, 968, 968, 969, 
			969, 970, 970, 970, 971, 971, 971, 972, 972, 972, 973, 973, 973, 974, 974, 974, 975, 975, 975, 976, 
			976, 976, 977, 977, 977, 977, 978, 978, 978, 979, 979, 979, 979, 980, 980, 980, 980, 981, 981, 981, 
			981, 982, 982, 982, 982, 983, 983, 983, 983, 983, 984, 984, 984, 984, 985, 985, 985, 985, 985, 986, 
			986, 986, 986, 986, 986, 987, 987, 987, 987, 987, 988, 988, 988, 988, 988, 988, 988, 989, 989, 989, 
			989, 989, 989, 990, 990, 990, 990, 990, 990, 990, 990, 991, 991, 991, 991, 991, 991, 991, 991, 992, 
			992, 992, 992, 992, 992, 992, 992, 992, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 994, 994, 
			994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 
			995, 995, 995, 995, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 
			996, 996, 996, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 997, 
			997, 997, 997, 997, 997, 997, 997, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 994, 
			994, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 992, 992, 992, 992, 992, 992, 992, 992, 992, 
			991, 991, 991, 991, 991, 991, 991, 991, 990, 990, 990, 990, 990, 990, 990, 990, 989, 989, 989, 989, 
			989, 989, 988, 988, 988, 988, 988, 988, 988, 987, 987, 987, 987, 987, 986, 986, 986, 986, 986, 986, 
			985, 985, 985, 985, 985, 984, 984, 984, 984, 983, 983, 983, 983, 983, 982, 982, 982, 982, 981, 981, 
			981, 981, 980, 980, 980, 980, 979, 979, 979, 979, 978, 978, 978, 977, 977, 977, 977, 976, 976, 976, 
			975, 975, 975, 974, 974, 974, 973, 973, 973, 972, 972, 972, 971, 971, 971, 970, 970, 970, 969, 969, 
			968, 968, 968, 967, 967, 966, 966, 966, 965, 965, 964, 964, 964, 963, 963, 962, 962, 961, 961, 960, 
			960, 959, 959, 958, 958, 957, 957, 956, 956, 955, 955, 954, 954, 953, 953, 952, 952, 951, 951, 950, 
			949, 949, 948, 948, 947, 946, 946, 945, 945, 944, 943, 943, 942, 941, 941, 940, 939, 939, 938, 937, 
			937, 936, 935, 935, 934, 933, 932, 932, 931, 930, 929, 929, 928, 927, 926, 925, 925, 924, 923, 922, 
			921, 921, 920, 919, 918, 917, 916, 915, 914, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 
			903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 885, 884, 883, 
			882, 881, 880, 879, 877, 876, 875, 874, 873, 871, 870, 869, 868, 866, 865, 864, 863, 861, 860, 859, 
			857, 856, 855, 853, 852, 851, 849, 848, 846, 845, 844, 842, 841, 839, 838, 836, 835, 833, 832, 830, 
			829, 827, 826, 824, 823, 821, 820, 818, 817, 815, 813, 812, 810, 809, 807, 805, 804, 802, 800, 798, 
			797, 795, 793, 792, 790, 788, 786, 785, 783, 781, 779, 777, 776, 774, 772, 770, 768, 766, 764, 763, 
			761, 759, 757, 755, 753, 751, 749, 747, 745, 743, 741, 739, 737, 735, 733, 731, 729, 727, 725, 723, 
			721, 718, 716, 714, 712, 710, 708, 706, 703, 701, 699, 697, 695, 692, 690, 688, 686, 684, 681, 679, 
			677, 674, 672, 670, 667, 665, 663, 660, 658, 656, 653, 651, 649, 646, 644, 641, 639, 637, 634, 632, 
			629, 627, 624, 622, 619, 617, 614, 612, 609, 607, 604, 602, 599, 597, 594, 591, 589, 586, 584, 581, 
			578, 576, 573, 571, 568, 565, 563, 560, 557, 555, 552, 549, 547, 544, 541, 539, 536, 533, 530, 528, 
			525, 522, 519, 517, 514, 511, 508, 506, 503, 500, 497, 495, 492, 489, 486, 483, 481, 478, 475, 472, 
			469, 467, 464, 461, 458, 455, 452, 450, 447, 444, 441, 438, 435, 433, 430, 427, 424, 421, 418, 415, 
			413, 410, 407, 404, 401, 398, 395, 393, 390, 387, 384, 381, 378, 375, 373, 370, 367, 364, 361, 358, 
			355, 353, 350, 347, 344, 341, 338, 336, 333, 330, 327, 324, 321, 319, 316, 313, 310, 307, 305, 302, 
			299, 296, 293, 291, 288, 285, 282, 280, 277, 274, 271, 269, 266, 263, 261, 258, 255, 252, 250, 247, 
			244, 242, 239, 236, 234, 231, 229, 226, 223, 221, 218, 216, 213, 210, 208, 205, 203, 200, 198, 195, 
			193, 190, 188, 185, 183, 180, 178, 176, 173, 171, 168, 166, 164, 161, 159, 157, 154, 152, 150, 147, 
			145, 143, 141, 138, 136, 134, 132, 130, 127, 125, 123, 121, 119, 117, 115, 113, 111, 109, 107, 105, 
			103, 101, 99, 97, 95, 93, 91, 89, 87, 86, 84, 82, 80, 78, 77, 75, 73, 71, 70, 68, 
			66, 65, 63, 62, 60, 59, 57, 55, 54, 52, 51, 50, 48, 47, 45, 44, 43, 41, 40, 39, 
			37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 
			16, 15, 15, 14, 13, 12, 12, 11, 10, 9, 9, 8, 8, 7, 6, 6, 5, 5, 4, 4, 
			4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 
			4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 
			18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 
			40, 41, 43, 44, 45, 47, 48, 50, 51, 52, 54, 55, 57, 59, 60, 62, 63, 65, 66, 68, 
			70, 71, 73, 75, 77, 78, 80, 82, 84, 86, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 
			107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 130, 132, 134, 136, 138, 141, 143, 145, 147, 
			150, 152, 154, 157, 159, 161, 164, 166, 168, 171, 173, 176, 178, 180, 183, 185, 188, 190, 193, 195, 
			198, 200, 203, 205, 208, 210, 213, 216, 218, 221, 223, 226, 229, 231, 234, 236, 239, 242, 244, 247, 
			250, 252, 255, 258, 261, 263, 266, 269, 271, 274, 277, 280, 282, 285, 288, 291, 293, 296, 299, 302, 
			305, 307, 310, 313, 316, 319, 321, 324, 327, 330, 333, 336, 338, 341, 344, 347, 350, 353, 355, 358, 
			361, 364, 367, 370, 373, 375, 378, 381, 384, 387, 390, 393, 395, 398, 401, 404, 407, 410, 413, 415, 
			418, 421, 424, 427, 430, 433, 435, 438, 441, 444, 447, 450, 452, 455, 458, 461, 464, 467, 469, 472, 
			475, 478, 481, 483, 486, 489, 492, 495, 497, 500, 503, 506, 508, 511, 514, 517, 519, 522, 525, 528, 
			530, 533, 536, 539, 541, 544, 547, 549, 552, 555, 557, 560, 563, 565, 568, 571, 573, 576, 578, 581, 
			584, 586, 589, 591, 594, 597, 599, 602, 604, 607, 609, 612, 614, 617, 619, 622, 624, 627, 629, 632, 
			634, 637, 639, 641, 644, 646, 649, 651, 653, 656, 658, 660, 663, 665, 667, 670, 672, 674, 677, 679, 
			681, 684, 686, 688, 690, 692, 695, 697, 699, 701, 703, 706, 708, 710, 712, 714, 716, 718, 721, 723, 
			725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 
			764, 766, 768, 770, 772, 774, 776, 777, 779, 781, 783, 785, 786, 788, 790, 792, 793, 795, 797, 798, 
			800, 802, 804, 805, 807, 809, 810, 812, 813, 815, 817, 818, 820, 821, 823, 824, 826, 827, 829, 830, 
			832, 833, 835, 836, 838, 839, 841, 842, 844, 845, 846, 848, 849, 851, 852, 853, 855, 856, 857, 859, 
			860, 861, 863, 864, 865, 866, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 
			884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 
			905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 914, 915, 916, 917, 918, 919, 920, 921, 921, 922, 
			923, 924, 925, 925, 926, 927, 928, 929, 929, 930, 931, 932, 932, 933, 934, 935, 935, 936, 937, 937, 
			938, 939, 939, 940, 941, 941, 942, 943, 943, 944, 945, 945, 946, 946, 947, 948, 948, 949, 949, 950]
	return [p_ngt[i] for i in dta]
